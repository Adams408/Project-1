/*
 * Name: James Adams, Davian Glenn
 * Date: September 18, 2018
 * Project 1
 * Class: COMP 360-01
 */


#include <iostream>
#include <fstream>

using namespace std;

/* Variables */
int charClass;
char lexeme[100];
char nextChar;
int lexLen;
int token;
int nextToken;
ifstream inFile;
bool ebnf;
string error;

/* Function Declarations */
void addChar();
void getChar();
void getNonBlank();
int lex();
void expr();
void term();
void factor();
void demo();

/* Character Classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99

/* Token Codes */
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20

#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
#define LEFT_BRAC 27
#define RIGHT_BRAC 28
#define SEMICOLON 29
#define COMMA 30

int main() {
    ebnf = true;
    /* open the input data file and process its contents */
    inFile.open("input1.txt");
    if (!inFile) {
        printf("ERROR - cannot open input.txt\n");
        exit(1);
    } else {
        printf("First test program\n");

        getChar();
        lex();
        do {
            expr();
        } while (nextToken != EOF);
        demo();
    }
    inFile.close();
    printf("\n");

    ebnf = true;
    inFile.open("input2.txt");
    if (!inFile) {
        printf("ERROR - cannot open input.txt\n");
        exit(1);
    } else {
        printf("Second test program\n");
        getChar();
        lex();
        do {
            expr();
        } while (nextToken != EOF);
        demo();
    }
    inFile.close();
}

void demo() {
    if (ebnf)
        printf("The test program is correct\n");
    else
        cout << "The test program cannot be generated by the Demo function. The syntax error is \"" + error + "\"\n";
}

/* lookup - a function to lookup operators and parentheses and return the token */
int lookup(char ch) {
    switch (ch) {
        case '(':
            addChar();
            nextToken = LEFT_PAREN;
            break;
        case ')':
            addChar();
            nextToken = RIGHT_PAREN;
            break;
        case '{':
            addChar();
            nextToken = LEFT_BRAC;
            break;
        case '}':
            addChar();
            nextToken = RIGHT_BRAC;
            break;
        case '=':
            addChar();
            nextToken = ASSIGN_OP;
            break;
        case '+':
            addChar();
            nextToken = ADD_OP;
            break;
        case '-':
            addChar();
            nextToken = SUB_OP;
            break;
        case '*':
            addChar();
            nextToken = MULT_OP;
            break;
        case '/':
            addChar();
            nextToken = DIV_OP;
            break;
        case ';':
            addChar();
            nextToken = SEMICOLON;
            break;
        case ',':
            addChar();
            nextToken = COMMA;
            ebnf = false;
            error = ",";
            break;
        default:
            addChar();
            nextToken = EOF;
            ebnf = false;
            break;
    }
    return nextToken;
}

/* addChar - a function to add nextChar to lexeme */
void addChar() {
    if (lexLen <= 98) {
        lexeme[lexLen++] = nextChar;
        lexeme[lexLen] = 0;
    } else
        printf("Error - lexeme is too long \n");
}

/* getChar - a function to get the next character of input and determine its character class */
void getChar() {
    if ((nextChar = inFile.get()) != EOF) {
        if (isalpha(nextChar))
            charClass = LETTER;
        else if (isdigit(nextChar))
            charClass = DIGIT;
        else charClass = UNKNOWN;
    } else
        charClass = EOF;
}

/* getNonBlank - a function to call getChar until it returns a non-â€‹whitespace character */
void getNonBlank() {
    while (isspace(nextChar))
        getChar();
}

/* lex - a simple lexical analyzer for arithmetic expressions */
int lex() {
    lexLen = 0;
    getNonBlank();
    switch (charClass) {
        /* Parse identifiers */
        case LETTER:
            addChar();
            getChar();
            while (charClass == LETTER || charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = IDENT;
            break;
        /* Parse integer literals */
        case DIGIT:
            addChar();
            getChar();
            while (charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = INT_LIT;
            break;
        /* Parentheses and operators */
        case UNKNOWN:
            lookup(nextChar);
            getChar();
            break;
        /* EOF */
        case EOF:
            nextToken = EOF;
            lexeme[0] = 'E';
            lexeme[1] = 'O';
            lexeme[2] = 'F';
            lexeme[3] = 0;
            break;
    }
    printf("Next token is: %d, Next lexeme is %s\n", nextToken, lexeme);
    return nextToken;
}

/* expr - parses strings in the language generated by the rule: <expr> -> <term> {(+ | -) <term>} */
void expr() {
    printf("Enter <expr>\n");
    /* Parse the first term */
    term();

    /* As long as the next token is + or -, get the next token and parse the next term */
    while (nextToken == ADD_OP || nextToken == SUB_OP) {
        lex();
        term();
    }
    printf("Exit <expr>\n");
}

/* term - parses strings in the language generated by the rule: <term> -> <factor> {(* | /) <factor>) */
void term() {
    printf("Enter <term>\n");
    /* Parse the first factor */
    factor();

    /* As long as the next token is * or /, get the next token and parse the next factor */
    while (nextToken == MULT_OP || nextToken == DIV_OP) {
        lex();
        factor();
    }
    printf("Exit <term>\n");
}

/* factor - parses strings in the language generated by the rule: <factor> -> id | int_constant | ( <expr ) */
void factor() {
    printf("Enter <factor>\n");
    /* Get the next token */
    if (nextToken == IDENT || nextToken == INT_LIT)
        lex();
    else {
        if (nextToken == LEFT_PAREN) {
            lex();
            expr();
            if (nextToken == RIGHT_PAREN)
                lex();
        } else
            lex();
    }
    printf("Exit <factor>\n");
}

